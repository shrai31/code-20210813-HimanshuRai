{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","data","Gender","HeightCm","WeightKg","map","val","bmiValue","toFixed","category","healthRisk","count","filter","length","className","row","key","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iKAEe,SAASA,IAEtB,IAAMC,EAAO,CACX,CAAEC,OAAQ,OAAUC,SAAU,IAAKC,SAAU,IAC7C,CAAEF,OAAQ,OAAUC,SAAU,IAAKC,SAAU,IAC7C,CAAEF,OAAQ,OAAUC,SAAU,IAAKC,SAAU,IAC7C,CAAEF,OAAQ,SAAUC,SAAU,IAAKC,SAAU,IAC7C,CAAEF,OAAQ,SAAUC,SAAU,IAAKC,SAAU,IAC7C,CAAEF,OAAQ,SAAUC,SAAU,IAAKC,SAAU,KAQ3CH,EAAKI,KAAI,SAACC,GAAD,OACTA,EAAIC,UAAYD,EAAIF,UAAYE,EAAIH,SAAS,IAAMG,EAAIH,SAAS,MAAMK,QAAQ,MAI9EP,EAAKI,KAAI,SAACC,GAmBR,OAlBIA,EAAIC,SAAW,OACjBD,EAAIG,SAAY,eAEdH,EAAIC,UAAY,MAAQD,EAAIC,SAAW,OACzCD,EAAIG,SAAW,iBAEbH,EAAIC,UAAY,IAAMD,EAAIC,SAAW,OACvCD,EAAIG,SAAY,cAEdH,EAAIC,UAAY,IAAMD,EAAIC,SAAW,OACvCD,EAAIG,SAAY,oBAEdH,EAAIC,UAAY,IAAMD,EAAIC,SAAW,OACvCD,EAAIG,SAAY,kBAEdH,EAAIC,UAAY,KAClBD,EAAIG,SAAW,uBAEVH,KAORL,EAAKI,KAAI,SAAAC,GAmBV,OAlBOA,EAAIC,SAAW,OACjBD,EAAII,WAAa,qBAEfJ,EAAIC,UAAW,MAAQD,EAAIC,SAAW,OACxCD,EAAII,WAAY,YAEdJ,EAAIC,UAAY,IAAMD,EAAIC,SAAW,OACvCD,EAAII,WAAY,iBAEdJ,EAAIC,UAAW,IAAMD,EAAIC,SAAW,OACtCD,EAAII,WAAa,eAEfJ,EAAIC,UAAW,IAAMD,EAAIC,SAAW,OACtCD,EAAII,WAAa,aAEfJ,EAAIC,UAAW,KACjBD,EAAII,WAAa,kBAEfJ,KAtBT,IAAMK,EAAK,UAAO,+DAAiEV,EAAKW,QAAO,SAACN,GAAD,MAAyB,eAAlBA,EAAIG,YAA6BI,QA0BzI,OACE,sBAAKC,UAAU,MAAf,UACE,kCACE,+BACE,wCACA,0CACA,0CACA,uDACA,8CACA,iDAEDb,EAAKI,KAAI,SAACU,EAAIC,GAAL,OACR,+BACE,6BAAKD,EAAIb,SACT,6BAAKa,EAAIZ,WACT,6BAAKY,EAAIX,WACT,6BAAKW,EAAIR,WACT,6BAAKQ,EAAIN,WACT,6BAAKM,EAAIL,eANFM,SAUb,qBAAKF,UAAU,QAAf,SACG,iCAASH,SC/FlB,IAYeM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.432ec408.chunk.js","sourcesContent":["import \"./App.css\";\n\nexport default function App() {\n  //Just change the second data\n  const data = [\n    { Gender: \"Male\",   HeightCm: 171, WeightKg: 96 },\n    { Gender: \"Male\",   HeightCm: 175, WeightKg: 85 },\n    { Gender: \"Male\",   HeightCm: 180, WeightKg: 77 },\n    { Gender: \"Female\", HeightCm: 166, WeightKg: 62 },\n    { Gender: \"Female\", HeightCm: 150, WeightKg: 70 },\n    { Gender: \"Female\", HeightCm: 167, WeightKg: 82 },\n  ];\n\n    bmiCalculate();\n    getCategory();\n    getHealthRisk();\n\n    function bmiCalculate() {\n      data.map((val)=>\n      val.bmiValue = (val.WeightKg / (val.HeightCm/100 * val.HeightCm/100)).toFixed(2))\n    }\n    \n    function getCategory() {\n      data.map((val)=>{\n        if (val.bmiValue < 18.5) {\n          val.category =  \"Underweight\";\n        }\n        if (val.bmiValue >= 18.5 && val.bmiValue < 24.9) {\n          val.category = \"Normal weight\";\n        }\n        if (val.bmiValue >= 25 && val.bmiValue < 29.9) {\n          val.category =  \"Overweight\";\n        }\n        if (val.bmiValue >= 30 && val.bmiValue < 34.9) {\n          val.category =  \"Moderately obese\";\n        }\n        if (val.bmiValue >= 35 && val.bmiValue < 39.9) {\n          val.category =  \"Severely obese\";\n        }\n        if (val.bmiValue >= 40) {\n          val.category = \"Very severely obese\";\n        } \n        return val\n      })\n    }\n\n    const count = `${ \" Number of person whose weights are equal to overweight is: \" + data.filter((val)=>val.category ===  \"Overweight\" ).length }`; \n  \n    function getHealthRisk() {\n       data.map(val=>{\n         if (val.bmiValue < 18.5) {\n           val.healthRisk = \"Malnutrition risk\";\n          }\n         if (val.bmiValue>= 18.5 && val.bmiValue < 24.9) {\n           val.healthRisk =\"Low risk\";\n          }\n         if (val.bmiValue >= 25 && val.bmiValue < 29.9) {\n           val.healthRisk =\"Enhanced risk\";\n          }\n         if (val.bmiValue>= 30 && val.bmiValue < 34.9) {\n           val.healthRisk = \"Medium risk\";\n          }\n         if (val.bmiValue>= 35 && val.bmiValue < 39.9) {\n           val.healthRisk = \"High risk\";\n          }\n         if (val.bmiValue>= 40) {\n           val.healthRisk = \"Very high risk\";\n          }\n      return val\n    })\n  }\n  \n  return (\n    <div className=\"App\">\n      <table>\n        <tr>\n          <th>Gender</th>\n          <th>HeightCm</th>\n          <th>WeightKg</th>\n          <th>BMI (Body Mass Index)</th>\n          <th>BMI Category</th>\n          <th> Health risk</th>\n        </tr>\n        {data.map((row,key) => (\n          <tr key={key}>\n            <td>{row.Gender}</td>\n            <td>{row.HeightCm}</td>\n            <td>{row.WeightKg}</td>\n            <td>{row.bmiValue}</td>\n            <td>{row.category}</td>\n            <td>{row.healthRisk}</td>\n          </tr>\n        ))}\n      </table>\n      <div className=\"Count\">\n         <strong>{count}</strong>\n      </div>\n    </div>\n  );\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}